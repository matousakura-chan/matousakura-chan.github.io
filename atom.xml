<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://matousakura-chan.github.io/</id>
    <title>Sakura</title>
    <updated>2021-03-06T07:11:09.014Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://matousakura-chan.github.io/"/>
    <link rel="self" href="https://matousakura-chan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://matousakura-chan.github.io/images/avatar.png</logo>
    <icon>https://matousakura-chan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Sakura</rights>
    <entry>
        <title type="html"><![CDATA[转 CSDN Java 面试题集合]]></title>
        <id>https://matousakura-chan.github.io/post/zhuan-csdn-java-mian-shi-ti-ji-he/</id>
        <link href="https://matousakura-chan.github.io/post/zhuan-csdn-java-mian-shi-ti-ji-he/">
        </link>
        <updated>2021-03-06T06:56:31.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104390612"  target="_blank">Java 基础知识面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104588551"  target="_blank">Java 集合容器面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104390689"  target="_blank">Java 异常面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104863992"  target="_blank">并发编程面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104390752"  target="_blank">JVM 面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104397516"  target="_blank">Spring 面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104397427"  target="_blank">Spring MVC 面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104397299"  target="_blank">Spring Boot 面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/101292950"  target="_blank">MyBatis 面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104778621"  target="_blank">MySQL 数据库面试题（2020最新版）</a></li>
<li><a href="https://thinkwon.blog.csdn.net/article/details/104588679"  target="_blank">Linux 面试题（2020最新版）</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 使用 BUG 记录]]></title>
        <id>https://matousakura-chan.github.io/post/gridea-shi-yong-bug-ji-lu/</id>
        <link href="https://matousakura-chan.github.io/post/gridea-shi-yong-bug-ji-lu/">
        </link>
        <updated>2021-03-06T05:58:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gridea-编辑器无法正常使用">Gridea 编辑器无法正常使用</h2>
<p>使用内置的编辑器出现前面段落无法删除的情况，解决方案为用 Gridea 生成文章后在源文件目录用 VSCode 或 Typora 打开。</p>
<h2 id="typora-编辑后出现所有文件消失">Typora 编辑后出现所有文件消失</h2>
<p>原因应该是原作者代码的问题，出现文章的 md 文件缺少开头：</p>
<pre><code>title: 'XXX'
date: 2021-03-06 13:52:10
tags: []
published: false
hideInList: false
feature: 
isTop: false
</code></pre>
<p>将直接出现异常导致无法读取真个根目录的文件。</p>
<p>建议还是使用 VSCode 编辑，能查看源代码，Typora容易不兼容。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 综合面试题目一]]></title>
        <id>https://matousakura-chan.github.io/post/java-zong-he-mian-shi-ti-mu-1/</id>
        <link href="https://matousakura-chan.github.io/post/java-zong-he-mian-shi-ti-mu-1/">
        </link>
        <updated>2021-03-06T05:52:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题一string-和-stringbuffer-stringbuilder的区别是什么string-为什么是不可变的">问题一：String 和 StringBuffer、StringBuilder的区别是什么？String 为什么是不可变的？</h2>
<ul>
<li>可变性</li>
</ul>
<p>String类中使用字符数组保存字符串，private final char value[]，所以string对象是不可变的。StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，char[] value，这两种对象都是可变的。</p>
<ul>
<li>线程安全性</li>
</ul>
<p>String中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder是StringBuilder与StringBuffer的公共父类，定义了一些字符串的基本操作，如expandCapacity、append、insert、indexOf等公共方法。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</p>
<ul>
<li>性能</li>
</ul>
<p>每次对String 类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String 对象，效率低耗费大量内存空间，从而引起垃圾回收。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用StirngBuilder 相比使用StringBuffer 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>
<ul>
<li>对于三者使用的总结</li>
</ul>
<p>如果要操作少量的数据用 String，单线程操作字符串缓冲区下操作大量数据用 StringBuilder，多线程操作字符串缓冲区下操作大量数据用 StringBuffer。</p>
<h2 id="问题二jdk18的hashmap其内部存储结构是什么">问题二：JDK1.8的HashMap，其内部存储结构是什么？</h2>
<p>在 Java 中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做拉链法的方法。它可以解决哈希冲突。</p>
<p>JDK1.8 之前采用的是拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p>
<p>JDK1.8 之后相比于之前的版本，jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p>
<h2 id="问题三集合里面有一个迭代器为什么要设计这个迭代器">问题三：集合里面有一个迭代器，为什么要设计这个迭代器？</h2>
<p>Iterator 接口，是一个为解决不同的集合类提供统一的遍历操作接口。</p>
<p>每一个集合都有自己的数据结构，有不同的存储数据的方式，都有特定的取出自己内部元素的方式。为了便于操作所有的容器，取出元素，将容器内部的取出方式按照一个统一的规则向外提供，这个规则就是Iterator接口，容器继承 Iterator 接口后，对容器的遍历操作与其具体的底层实现相隔离，达到解耦的效果。迭代器 Iterator 通过 hasnext 方法判断是否还有数据。通过 next 方法得到数据。</p>
<p>Iterator 的特点是只能单向遍历，但是更加安全，因为它可以确保，不会出现并发修改异常。执行 remove 操作时，先执行checkForComodification 方法，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。</p>
<h2 id="问题四单机环境下并发控制java有那些手段">问题四：单机环境下并发控制，Java有那些手段？</h2>
<p>最基础的：</p>
<ol>
<li>
<p>同步方法synchronized</p>
</li>
<li>
<p>同步块synchronized</p>
</li>
</ol>
<p>进阶的：</p>
<p>重入锁ReentrantLock</p>
<h2 id="问题五多线程创建的方式有哪几种">问题五：多线程创建的方式有哪几种？</h2>
<ol>
<li>
<p>继承Thread类创建线程</p>
</li>
<li>
<p>实现Runnable接口创建线程</p>
</li>
<li>
<p>实现Callable接口通过FutureTask包装器来创建Thread线程</p>
</li>
<li>
<p>使用ExecutorService、Callable、Future实现有返回结果的线程</p>
</li>
</ol>
<h2 id="问题六怎么防止表单重复提交服务器防止表单重复提交的原理">问题六：怎么防止表单重复提交，服务器防止表单重复提交的原理？</h2>
<ol>
<li>提交按钮后屏蔽提交按钮(前端js控制)</li>
<li>前端生产唯一id，后端通过唯一索引（简单粗暴，我喜欢）</li>
<li>利用Session防止表单重复提交</li>
</ol>
<h2 id="问题七spring-aop的原理是什么">问题七：Spring AOP的原理是什么？</h2>
<p>通过预编译方式和运行期动态代理方式实现程序功能的统一维护的一种技术</p>
<p>主要功能：日志记录、性能统计、安全控制、事务处理、异常处理等等</p>
<p>AOP实现方式</p>
<p>预编译：AspectJ</p>
<p>运行期动态代理（JDK动态代理、CGLib动态代理）：SpringAOP、JbossAOP</p>
<p>AOP几个相关概念</p>
<p>面向切面的核心思想就是，让核心的业务逻辑代码，不需要去管理一些通用的逻辑，比如说事务，安全等这方面的共同逻辑,解耦业务逻辑和通用逻辑</p>
<ul>
<li>参考：<a href="https://mp.weixin.qq.com/s/h_yQY_cXsYqi0fvn4o1Eng" target="_blank">绝对值得你收藏的 spring 笔记</a></li>
</ul>
<h2 id="问题八批量往mysql数据库导入1000万条数据有什么思路">问题八：批量往MySQL数据库导入1000万条数据有什么思路？</h2>
<p>仅仅针对开发层面优化，优化数据库插入性能是很有意义的。从减少IO次数、SQL写法优化、合理设置批量大小、尽量顺序插入方向考虑。</p>
<ol>
<li>
<p>一条SQL语句插入多条数据 ，SQL执行效率高的主要原因是合并后日志量（MySQL的binlog和innodb的事务让日志） 减少了，降低日志刷盘的数据量和频率，从而提高效率。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的IO。</p>
</li>
<li>
<p>使用事务提交方式，可以提高数据的插入效率。因为进行一个INSERT操作时，MySQL内部会建立一个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，所有插入都在执行后才进行提交操作。</p>
</li>
</ol>
<pre><code>START TRANSACTION;  （INSERT INTO TABLE (....) VALUES(...)）；...COMMIT;
</code></pre>
<ol start="3">
<li>数据有序插入，减少索引的维护压力。由于数据库插入时，需要维护索引数据，无序的记录会增大维护索引的成本。我们可以参照innodb使用的B+tree索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，并且对索引调整较小；如果插入的记录在索引中间，需要B+tree进行分裂合并等处理，会消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘操作。</li>
</ol>
<ul>
<li>
<p>参考： <a href="https://blog.csdn.net/caox_nazi/article/details/88853008?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control" target="_blank">MySql下大数据量级别（1000万+）优化查询和操作方法</a></p>
</li>
<li>
<p>批量插入SQL例子，Mybatis的小demo</p>
</li>
</ul>
<pre><code>&lt;!-- 批量插入流量模块 --&gt;
    &lt;insert id=&quot;XXX_表-BATCH-INSERT&quot; parameterClass=&quot;java.util.List&quot;&gt;
        INSERT  INTO
        XXX_表(gmt_create,gmt_modified,字段A,字段B,字段C)
        VALUES
        &lt;iterate conjunction=&quot;,&quot;&gt;
            &lt;![CDATA[
         (NOW(),NOW(),#vals[].字段A#,#vals[].字段B#,#vals[].字段C#)
        ]]&gt;
        &lt;/iterate&gt;
    &lt;/insert&gt;
</code></pre>
<ul>
<li>事务</li>
</ul>
<pre><code>START TRANSACTION;  
  INSERT  INTO
        XXX_表(gmt_create,gmt_modified,字段A,字段B,字段C)
        VALUES (NOW(),NOW(),#vals[].字段A#,#字段B[].字段C#)
...  
COMMIT;
</code></pre>
<h2 id="问题九项目中做日志框架错误日志具体怎么配置">问题九：项目中做日志框架，错误日志具体怎么配置？</h2>
<p>log4j</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduction Myself]]></title>
        <id>https://matousakura-chan.github.io/post/introduction-myself/</id>
        <link href="https://matousakura-chan.github.io/post/introduction-myself/">
        </link>
        <updated>2021-03-05T10:41:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="起源">起源</h2>
<p>😀我是机械专业的学生，经过大一到大三的的时光，从最开始的单片机和电路，到后来学习ROS之后跑路，我发现我最喜欢的还是纯编程的开发，软件碰上硬件还是容易没能在一个技术方面上有所成就。很感谢林总的帮助，虽然我是非科班的，但在学习上因为有他指明了学习的方向，才能开始变得不那么迷茫。在最后求职期校园内也有他作为我的战友，我要加油啊，努力成为一名Java工程师！</p>
]]></content>
    </entry>
</feed>